#--------------------------------------------------------------------------------------------------
# Windows
#--------------------------------------------------------------------------------------------------

jobs:
- job: win32_qt4
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh environment.sh qt4
      sh generate.sh win32 build
      7z a 3rdparty.zip win32
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-win32-qt4

#--------------------------------------------------------------------------------------------------

- job: win32_qt5
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh environment.sh qt5
      sh generate.sh win32 build
      7z a 3rdparty.zip win32
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-win32-qt5

- job: win64_qt5
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh environment.sh qt5
      sh generate.sh win64 build
      7z a 3rdparty.zip win64
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-win64-qt5

- job: win32_msvc_qt5
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh environment.sh msvc
      sh environment.sh qt5
      sh generate.sh win32 build
      7z a 3rdparty.zip win32
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-win32-msvc-qt5

- job: win64_msvc_qt5
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh environment.sh msvc
      sh environment.sh qt5
      sh generate.sh win64 build
      7z a 3rdparty.zip win64
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-win64-msvc-qt5

#--------------------------------------------------------------------------------------------------

# NOTE Qt6: 32 bit packages are no longer supported
# - job: win32_qt6
#   pool:
#     vmImage: "windows-latest"
#   steps:
#   - bash: |
#       sh environment.sh qt6
#       sh generate.sh win32 build
#       7z a 3rdparty.zip win32
#   - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#     artifact: 3rdparty-win32-qt6

- job: win64_qt6
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh environment.sh qt6
      sh generate.sh win64 build
      7z a 3rdparty.zip win64
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-win64-qt6

# NOTE Qt6: 32 bit packages are no longer supported
# - job: win32_msvc_qt6
#   pool:
#     vmImage: "windows-latest"
#   steps:
#   - bash: |
#       sh environment.sh msvc
#       sh environment.sh qt6
#       sh generate.sh win32 build
#       7z a 3rdparty.zip win32
#   - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#     artifact: 3rdparty-win32-msvc-qt6

- job: win64_msvc_qt6
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh environment.sh msvc
      sh environment.sh qt6
      sh generate.sh win64 build
      7z a 3rdparty.zip win64
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-win64-msvc-qt6

#--------------------------------------------------------------------------------------------------
# macOS
#--------------------------------------------------------------------------------------------------

- job: macOS_qt5
  pool:
    vmImage: "macOS-14"
  steps:
  - bash: |
      sh environment.sh qt5
      sh generate.sh macOS build
      zip -rq 3rdparty.zip macOS
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-macOS-qt5

- job: macOS_qt6
  pool:
    vmImage: "macOS-14"
  steps:
  - bash: |
      sh environment.sh qt6
      sh generate.sh macOS build
      zip -rq 3rdparty.zip macOS
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-macOS-qt6

#--------------------------------------------------------------------------------------------------
# iOS
#--------------------------------------------------------------------------------------------------

- job: iOS_qt5
  pool:
    vmImage: "macOS-14"
  steps:
  - bash: |
      sh environment.sh qt5
      sh generate.sh iOS build
      zip -rq 3rdparty.zip iOS
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-iOS-qt5

- job: iOS_qt6
  pool:
    vmImage: "macOS-14"
  steps:
  - bash: |
      sh environment.sh qt6
      sh generate.sh iOS build
      zip -rq 3rdparty.zip iOS
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-iOS-qt6

#--------------------------------------------------------------------------------------------------
# Linux
#--------------------------------------------------------------------------------------------------

- job: linux32_qt4
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      docker run -d --name ubuntu -v $PWD:/3rdparty i386/ubuntu:18.04 tail -f /dev/null
      docker exec -t ubuntu bash -c "cd /3rdparty;
                                     apt-get update;
                                     apt-get -y install sudo curl zip;
                                     sh environment.sh qt4;
                                     sh generate.sh linux build;
                                     zip -rq 3rdparty.zip linux"
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-linux32-qt4

- job: linux64_qt4
  pool:
    # NOTE: Ubuntu 20.04 seems to be required for qt4-default.
    vmImage: "ubuntu-20.04"
  steps:
  - bash: |
      sh environment.sh qt4
      sh generate.sh linux build
      zip -rq 3rdparty.zip linux
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-linux64-qt4

#--------------------------------------------------------------------------------------------------

- job: linux32_qt5
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      docker run -d --name ubuntu -v $PWD:/3rdparty i386/ubuntu:20.04 tail -f /dev/null
      docker exec -t ubuntu bash -c "cd /3rdparty;
                                     apt-get update;
                                     apt-get -y install sudo curl zip;
                                     sh environment.sh qt5;
                                     sh generate.sh linux build;
                                     zip -rq 3rdparty.zip linux"
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-linux32-qt5

- job: linux64_qt5
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      docker run -d --name ubuntu -v $PWD:/3rdparty amd64/ubuntu:22.04 tail -f /dev/null
      docker exec -t ubuntu bash -c "cd /3rdparty;
                                     apt-get update;
                                     apt-get -y install sudo curl zip;
                                     sh environment.sh qt5;
                                     sh generate.sh linux build;
                                     zip -rq 3rdparty.zip linux"
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-linux64-qt5

#--------------------------------------------------------------------------------------------------

- job: linux64_qt6
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      sh environment.sh qt6
      sh generate.sh linux build
      zip -rq 3rdparty.zip linux
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-linux64-qt6

#--------------------------------------------------------------------------------------------------
# Android
#--------------------------------------------------------------------------------------------------

- job: android_qt5
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      sh environment.sh qt5
      sh generate.sh android build
      zip -rqy 3rdparty.zip android
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-android-qt5

- job: android_qt6
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      sh environment.sh qt6
      sh generate.sh android build
      zip -rqy 3rdparty.zip android
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-android-qt6
